function solution(hp) {
  //장군개미(j): 5, 병정개미(b): 3, 일개미(w): 1라고 하자.
  // 5*j + b*3 + w === hp
  let j = Math.floor(hp / 5);
  let b = Math.floor((hp % 5) / 3);
  let w = (hp % 5) % 3;

  return j + b + w;
}

//js자료구조: object, set, map, ...중에서

//   "Map" v.s. "객체(Object)"
// 키(Key)의 자료형:
// Map: Map의 키는 어떤 자료형이든 가능합니다. 숫자, 문자열, 객체 등 모든 자료형을 키로 사용할 수 있습니다.
// 객체(Object): 객체의 속성(키)은 주로 문자열로 사용됩니다. 객체의 속성은 문자열로 변환되며, 다른 자료형은 자동으로 문자열로 변환됩니다.

// 순서:
// Map: Map은 삽입 순서를 유지합니다. 삽입된 순서대로 순회할 수 있습니다.
// 객체(Object): 객체는 순서를 보장하지 않습니다. 객체의 속성 순서는 보장되지 않으며, 순회 결과도 보장되지 않습니다.

// 메서드:
// Map: Map은 메서드를 통해 데이터를 추가, 삭제, 수정하는 등 다양한 조작을 할 수 있습니다. set(), get(), delete(), clear() 등의 메서드를 제공합니다.
// 객체(Object): 객체 또한 속성을 추가, 삭제, 수정할 수 있지만, Map보다 다양한 데이터 조작 메서드를 가지고 있지는 않습니다.

// 프로토타입 체인:
// Map: Map은 프로토타입 체인과 관계 없이 단순한 자료구조입니다.
// 객체(Object): 객체는 프로토타입 체인과 연결되어 있습니다. 다른 객체를 프로토타입으로 사용하여 상속을 구현할 수 있습니다.
// 일반적으로 데이터를 저장하고 다루기 위해서는 일반 객체(Object)를 사용하는 것이 가장 자연스럽고 많이 쓰입니다. 하지만 특정 상황에서 순서를 보장하고 다양한 데이터 조작 메서드가 필요할 때는 Map을 사용하는 것이 유용합니다. 따라서 사용하고자 하는 기능과 요구사항에 따라 적절히 선택하면 됩니다.